# .github/workflows/ci.yml
name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: bailey7220/qraiop

jobs:
  test-crypto:
    runs-on: ubuntu-latest
    name: Test Rust Crypto Library
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        components: rustfmt, clippy
    
    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          src/crypto/target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Format check
      run: cd src/crypto && cargo fmt -- --check
    
    - name: Lint with Clippy
      run: cd src/crypto && cargo clippy -- -D warnings
    
    - name: Run tests
      run: cd src/crypto && cargo test --verbose
    
    - name: Run benchmarks
      run: cd src/crypto && cargo bench
    
    - name: Security audit
      run: |
        cargo install cargo-audit
        cd src/crypto && cargo audit

  test-python:
    runs-on: ubuntu-latest
    name: Test Python Components
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11"]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r src/agents/requirements.txt
        pip install -r src/chaos/requirements.txt
        pip install -r tests/requirements.txt
    
    - name: Lint with flake8
      run: |
        flake8 src/agents src/chaos --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src/agents src/chaos --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Format check with black
      run: black --check src/agents src/chaos
    
    - name: Type check with mypy
      run: mypy src/agents src/chaos
    
    - name: Run tests with pytest
      run: pytest tests/ -v --cov=src/ --cov-report=xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3

  test-go:
    runs-on: ubuntu-latest
    name: Test Go Controllers
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
    
    - name: Cache Go dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/go/pkg/mod
          ~/.cache/go-build
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
    
    - name: Install dependencies
      run: cd src/controllers && go mod download
    
    - name: Format check
      run: cd src/controllers && test -z "$(go fmt ./...)"
    
    - name: Lint
      uses: golangci/golangci-lint-action@v3
      with:
        working-directory: src/controllers
        version: latest
    
    - name: Run tests
      run: cd src/controllers && go test -v ./...
    
    - name: Security scan
      uses: securecodewarrior/github-action-gosec@master
      with:
        args: '-fmt sarif -out results.sarif ./src/controllers/...'

  security-scan:
    runs-on: ubuntu-latest
    name: Security Scanning
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: Run Snyk to check for vulnerabilities
      uses: snyk/actions/setup@master
    
    - name: Snyk test
      run: snyk test --all-projects
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  build-and-push:
    runs-on: ubuntu-latest
    needs: [test-crypto, test-python, test-go, security-scan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix=sha-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
    
    - name: Run container security scan
      run: |
        docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
          -v $(pwd):/tmp aquasec/trivy image \
          --format sarif --output /tmp/container-results.sarif \
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
    
    - name: Upload container scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'container-results.sarif'

  deploy-staging:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Configure kubectl
      uses: azure/k8s-set-context@v3
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.KUBE_CONFIG }}
    
    - name: Deploy to staging
      run: |
        kubectl apply -f configs/k8s/namespace.yml
        kubectl apply -f configs/k8s/staging/
        kubectl rollout status deployment/qraiop-controller -n qraiop-staging
    
    - name: Run integration tests
      run: |
        kubectl wait --for=condition=ready pod -l app=qraiop-controller -n qraiop-staging --timeout=300s
        pytest tests/integration/ -v --staging
